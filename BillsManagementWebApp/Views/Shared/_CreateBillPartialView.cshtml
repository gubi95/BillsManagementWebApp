@using BillsManagementWebApp.ViewModels
@using BillsManagementWebApp.Models
@using BillsManagementWebApp.Shared
@model BillViewModel

@{    
    int nCurrentUserID = SessionManager.GetCurrentUser().UserID;
}

<script>
    var createBillFormValidator = null;
    var isBillCreationMode = true;
    var currentEditedBillID = -1;
    var currentCategoriesSelectHtml = '';

    jQuery(document).ready(function () {
        createBillFormValidator = new Validator('#formCreateBill');

        jQuery('#dtPurchaseDate').datetimepicker({
            useCurrent: true,
            locale: 'pl',
            format: 'DD.MM.YYYY',
            ignoreReadonly: true
        });

        jQuery('.product-price-selector').TouchSpin({
            verticalbuttons: true,
            verticalupclass: 'glyphicon glyphicon-plus',
            verticaldownclass: 'glyphicon glyphicon-minus',
            min: 0.01,
            max: 1000000.00,
            step: 0.01,
            decimals: 2,
            initval: 1.00,
            postfix: "zł"
        });

        jQuery('.product-quantity-selector').TouchSpin({
            verticalbuttons: true,
            verticalupclass: 'glyphicon glyphicon-plus',
            verticaldownclass: 'glyphicon glyphicon-minus',
            min: 0.01,
            max: 1000000.00,
            step: 0.01,
            decimals: 2,
            initval: 1.00,
        });

        jQuery('#cbCreateNewShop').iCheck({
            checkboxClass: 'icheckbox_flat-grey',
            radioClass: 'iradio_flat-grey'
        }).on('ifChanged', function (event) {
            var isChecked = jQuery(this).is(':checked');
            if (isChecked) {
                jQuery('#ddlShopSelector').selectpicker('hide');
                jQuery('#txtNewShopName')
                    .attr('data-validators', 'not-empty')
                    .val('')
                    .show();

            }
            else {
                jQuery('#txtNewShopName').hide();
                RemoveFieldFromValidation(jQuery('#txtNewShopName'));
                jQuery('#ddlShopSelector').selectpicker('show');
            }
        });

        jQuery('body').on('click', '#btn-add-product-row', AddNewProductRow);

        jQuery('body').on('click', '.btn-remove-product-row', function () {
            jQuery(this).closest('.product-row').remove();
        });
    });

    function SetProductCategoriesForBillEntries(billID) {
        var that = this;
        jQuery.ajax({
            type: 'GET',
            url: '/api/ProductCategory/GetAll?UserID=@nCurrentUserID',
            contentType: 'application/json',
            beforeSend: function () {
                ShowHideAjaxWheel(true);
            },
            success: function (data) {                
                if (data.ReturnCode == 0) {
                    currentCategoriesSelectHtml = '<select class="select-product-category selectpicker" data-live-search="true">';
                    currentCategoriesSelectHtml += '<option value="-1">Bez kategorii</option>';
                    var firstCategorySelectHtml = '';
                    var categories = data.Categories;
                    for (var i = 0; i < categories.length; i++) {
                        currentCategoriesSelectHtml += '<option value="' + categories[i].ProductCategoryID + '">' + categories[i].Name + '</option>';
                        firstCategorySelectHtml += '<option value="' + categories[i].ProductCategoryID + '">' + categories[i].Name + '</option>';
                    }
                    jQuery('#firstProductCategorySelect').html('<option value="-1">Bez kategorii</option>' + firstCategorySelectHtml);
                    jQuery('#firstProductCategorySelect').selectpicker('refresh');
                    currentCategoriesSelectHtml += '</select>';

                    if (billID != undefined) {                        
                        FillCreateBillFormForEdit(billID);
                    }
                }
                ShowHideAjaxWheel(false);
            },
            error: function () {
                ShowHideAjaxWheel(false);
            }
        });
    }

    function AddNewProductRow() {
        var productRowHTML =
            '<div class="row product-row" style="padding-bottom: 10px;">' +
                '<div class="col-md-4" style="padding-top: 4px; padding-left: 40px;">' +
                    '<input type="text" class="form-control" data-validators="not-empty" />' +
                '</div>' +
                '<div class="col-md-2" style="padding-top: 4px;">' +
                    '<input type="text" class="product-quantity-selector" style="border-top-left-radius: 4px; border-bottom-left-radius: 4px;" data-validators="not-empty,reg-exp" data-valid-reg-exp="^(?:\\d*((\\.)|(,))\\d{2}|\\d+)$">' +
                '</div>' +
                '<div class="col-md-2" style="padding-top: 4px;">' +
                    '<input type="text" class="product-price-selector" style="border-top-left-radius: 4px; border-bottom-left-radius: 4px;" data-validators="not-empty,reg-exp" data-valid-reg-exp="^(?:\\d*((\\.)|(,))\\d{2}|\\d+)$">' +
                '</div>' +
                '<div class="col-md-3" style="padding-top: 4px;">' +
                    currentCategoriesSelectHtml +
                '</div>' +
                '<div class="col-md-1" style="padding-top: 4px;">' +
                    '<a class="btn btn-default btn-md btn-remove-product-row"><i class="fa fa-times"></i></a>' +
                '</div>' +
            '</div>';
        jQuery(productRowHTML).insertAfter(jQuery('.product-row').last());

        jQuery(jQuery('.product-price-selector').last()).TouchSpin({
            verticalbuttons: true,
            verticalupclass: 'glyphicon glyphicon-plus',
            verticaldownclass: 'glyphicon glyphicon-minus',
            min: 0.01,
            max: 1000000.00,
            step: 0.01,
            decimals: 2,
            initval: 1.00,
            postfix: "zł"
        });

        jQuery(jQuery('.product-quantity-selector').last()).TouchSpin({
            verticalbuttons: true,
            verticalupclass: 'glyphicon glyphicon-plus',
            verticaldownclass: 'glyphicon glyphicon-minus',
            min: 0.01,
            max: 1000000.00,
            step: 0.01,
            decimals: 2,
            initval: 1.00,
        });

        jQuery('.select-product-category').last().selectpicker();
    }

    function SaveNewBill() {
        if (!createBillFormValidator.validate(true)) {
            return;
        }

        var objStore = null;
        var isNewShopCreated = jQuery('#cbCreateNewShop').is(':checked');

        if(isNewShopCreated) {
            objStore = {
                StoreID: -1,
                StoreName: jQuery('#txtNewShopName').val().trim()
            };
        }
        else {
            if (jQuery('#ddlShopSelector').selectpicker('val') == '-1') {                
                return;
            }
            objStore = {
                StoreID: jQuery('#ddlShopSelector').selectpicker('val') * 1,
                StoreName: ''
            };
        }

        var arrProducts = [];
        jQuery('.product-row').each(function () {
            var productID = jQuery(this).attr('pid') != undefined ? jQuery(this).attr('pid') * 1 : -1;
            var productName = jQuery(this).find('input[type="text"]').eq(0).val();
            var productQuantity = jQuery(this).find('.product-quantity-selector').val() * 1.00;
            var productPrice = jQuery(this).find('.product-price-selector').val() * 1.00;
            var productCategoryID = jQuery(this).find('.select-product-category').selectpicker('val') * 1;

            arrProducts.push({
                ProductID: isBillCreationMode ? -1 : productID,
                ProductName: productName,
                Quantity: productQuantity,
                Price: productPrice,
                ProductCategoryID: productCategoryID
            });
        });

        var objBill = {
            BillID: isBillCreationMode ? -1 : currentEditedBillID,
            PurchaseDate: FormatJSDateToCSharpDate(jQuery('#dtPurchaseDate').data("DateTimePicker").date()._d),
            Store: objStore,
            Products: arrProducts
        };

        jQuery.ajax({
            type: 'POST',
            url: '/Handlers/BillHandler.ashx?Action=' + (isBillCreationMode ? 'Create' : 'Edit'),
            contentType: 'application/json',
            data: JSON.stringify(objBill),
            beforeSend: function() {
                ShowHideAjaxWheel(true);
            },
            success: function (data) {
                setTimeout(function (data) {
                    ShowHideAjaxWheel(false);
                    if (data.Success) {
                        ShowAlertSuccess(isBillCreationMode ? 'Paragon został dodany!' : 'Paragon został zaktualizowany', 4000);

                        if(isNewShopCreated) {
                            jQuery('#ddlShopSelector')
                                .find('option[value="-1"]')
                                .remove();
                            jQuery('#ddlShopSelector')
                                .append('<option value="' + data.Bill.Shop.ShopID + '">' + data.Bill.Shop.ShopName + '</option>');
                            jQuery('#ddlShopSelector')
                                .selectpicker('refresh');
                        }

                        // table is in _BillsListPartialView
                        var table = jQuery("#tableBillsList").DataTable();
                        var rowData = [];

                        if (isBillCreationMode) {
                            ResetCreateBillForm();                            
                            rowData.push(FormatJSDateToString(jQuery('#dtPurchaseDate').data('DateTimePicker').date()._d));
                            rowData.push(data.NewPriceFormatted);
                            rowData.push(data.NewShopName);
                            rowData.push(data.NewProductsCount);
                            rowData.push('<a class="btn btn-default btn-sm" onclick="GoToEditBill(' + data.Bill.BillID + ');"><i class="fa fa-pencil"></i>&nbsp;Edytuj</a>');
                            var newTableRow = table.row.add(rowData).draw().node();
                            jQuery(newTableRow).attr('id', 'bill-row-' + data.Bill.BillID);
                        }
                        else {
                            var rowSelector = '#bill-row-' + data.Bill.BillID;
                            var row = table.row(rowSelector);
                            rowData = row.data();
                            rowData[0] = FormatJSDateToString(jQuery('#dtPurchaseDate').data('DateTimePicker').date()._d);
                            rowData[1] = data.NewPriceFormatted;
                            rowData[2] = data.NewShopName;
                            rowData[3] = data.NewProductsCount;
                            row.data(rowData);
                        }
                    }
                    else {
                        ShowAlertError('Coś poszło nie tak, prosze spróbować ponownie.', 4000);
                    }
                }, 500, data);
            },
            error: function () {
                setTimeout(function () {
                    ShowHideAjaxWheel(false);
                    ShowAlertError('Coś poszło nie tak, prosze spróbować ponownie.', 4000);
                }, 500);
            }
        });
    }

    function ResetCreateBillForm() {
        jQuery('#dtPurchaseDate').data("DateTimePicker").date(new Date());
        jQuery('#cbCreateNewShop').iCheck('uncheck');
        jQuery('#formCreateBill #ddlShopSelector').selectpicker('val',
            jQuery('#formCreateBill #ddlShopSelector option').eq(0).attr('value')
        );
        jQuery('#formCreateBill .product-row').slice(1).remove();
        jQuery('#formCreateBill .product-row input[type="text"]').eq(0).val('');
        jQuery('#formCreateBill .product-row .product-quantity-selector').val('1.00');
        jQuery('#formCreateBill .product-row .product-price-selector').val('1.00');
        jQuery('#formCreateBill .product-row .select-product-category').selectpicker('val',
            jQuery('#formCreateBill .product-row .select-product-category option').eq(0).attr('value')
        );
    }

    @* EDIT BILLS CODE *@
    function FillCreateBillFormForEdit(billID) {
        currentEditedBillID = billID;
        ResetCreateBillForm();
        jQuery.ajax({
            type: 'GET',
            url: '/Handlers/BillHandler.ashx?Action=Get&BillID=' + billID,
            contentType: 'applcation/json',
            beforeSend: function() {
                ShowHideAjaxWheel(true);
            },
            success: function (data) {                
                jQuery('#dtPurchaseDate').data("DateTimePicker").date(new Date(data.Bill.PurchaseDate));
                jQuery('#cbCreateNewShop').iCheck('uncheck');
                jQuery('#formCreateBill #ddlShopSelector').selectpicker('val', data.Bill.Shop.ShopID);
                if (data.Success) {
                    // first row exists always so create rows only for entries in rage: 1 to n
                    if (data.Bill.Entries.length > 1) {
                        for (var i = 1; i < data.Bill.Entries.length; i++) {
                            AddNewProductRow();
                        }
                    }

                    jQuery('#formCreateBill .product-row').each(function (index) {
                        var $row = jQuery(this);
                        var currEntry = data.Bill.Entries[index];
                        $row.attr('pid', currEntry.BillEntryID);
                        $row.find('input[type="text"]').eq(0).val(currEntry.ProductName);
                        $row.find('.product-quantity-selector').val(currEntry.Quantity.toFixed(2));
                        $row.find('.product-price-selector').val(currEntry.Price.toFixed(2));
                        $row.find('.select-product-category').selectpicker('val', currEntry.Category != null ? currEntry.Category.ProductCategoryID : '-1');
                    });

                    jQuery('#btn-delete-bill').show();

                }
                ShowHideAjaxWheel(false);
            },
            error: function (e) {
                currentEditedBillID = -1;
                ShowHideAjaxWheel(false);
            }
        });
    }

    function DeleteCurrentBill() {
        jQuery.ajax({
            type: 'POST',
            url: '/Handlers/BillHandler.ashx?Action=Delete',
            data: JSON.stringify({ BillID: currentEditedBillID }),
            contentType: 'applcation/json',
            beforeSend: function () {
                ShowHideAjaxWheel(true);
            },
            success: function (data) {
                if (data.Success) {
                    ShowAlertSuccess('Paragon został usunięty!', 4000);
                    ResetCreateBillForm();                    
                    jQuery('#btn-delete-bill').hide();
                    var table = jQuery("#tableBillsList").DataTable();
                    var rowSelector = '#bill-row-' + currentEditedBillID;
                    table.row(rowSelector).remove();
                    table.draw();
                    currentEditedBillID = -1;
                    GoToBillsList();
                }
                else {
                    ShowAlertSuccess('Coś poszło nie tak, proszę spróbować ponownie.', 4000);
                }

                ShowHideAjaxWheel(false);
            },
            error: function () {
                ShowAlertSuccess('Coś poszło nie tak, proszę spróbować ponownie.', 4000);
                ShowHideAjaxWheel(false);
            }
        });
    }

</script>

<style>
    .custom-label {
        font-family: Lato;
        color: white;
    }

    #formCreateBill .bootstrap-select {
        width: 100%;
    }

    .btn-transparent {
        min-width: 100px;
        height: 40px;
        background-color: rgba(0,0,0,0);
        border: 1px solid white;
        color: white;
        font-family: Lato;
        text-align: center;
        text-decoration: none;        
        font-size: 14px;
        border-radius: 0;
        -webkit-transition: all 0.20s;
        transition: all 0.20s;
    }

    .btn-transparent:hover {
        background-color: rgba(80,80,80, 0.75) !important;
        color: white !important;       
        border-color: white !important;
    }
</style>

<form id="formCreateBill">
    <div class="row">
        <div class="col-md-2" style="padding-top: 4px;">
            <span class="custom-label">Data zakupów:</span>
        </div>
        <div class="col-md-10">
            <div class='input-group date' id='dtPurchaseDate' style="width: 250px;">
                <input type='text' class="form-control" readonly="readonly" data-validators="not-empty,pl-date" />
                <span class="input-group-addon">
                    <span class="glyphicon glyphicon-calendar"></span>
                </span>
            </div>
        </div>
    </div>
    <div class="row" style="padding-top: 10px;">
        <div class="col-md-2" style="padding-top: 4px;">
            <span class="custom-label">Sklep:</span>
        </div>
        <div class="col-md-2" style="padding-top: 7px;">
            <label class="custom-label" for="cbCreateNewShop" style="margin-left: 8px; font-weight: normal;">Nowy sklep</label>
            <div class="iradio checked" style="float: left;">
                <input type="checkbox" id="cbCreateNewShop" checked>
            </div>
        </div>
        <div class="col-md-3">
            <input type="text" class="form-control" id="txtNewShopName" style="display: none;" />
            <select class="selectpicker" id="ddlShopSelector" data-live-search="true">
                @{                      
                    List<Shop> listShop = new ApplicationDBContext()
                        .Shops
                        .Include("UserOwner")
                        .Where(x => x.UserOwner.UserID == nCurrentUserID)
                        .ToList();
                    listShop = listShop.Count == 0 ? new List<Shop>() { new Shop() { ShopID = -1, ShopName = "Brak sklepów" } } : listShop;
                    foreach (Shop objShop in listShop)
                    {
                        <option value="@objShop.ShopID">@objShop.ShopName</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h2 style="color: white; font-family: Abel;">Produkty:</h2>
        </div>
    </div>          
    <div class="row">
        <div class="col-md-4" style="padding-top: 4px; padding-left: 40px;">
            <span class="custom-label">Produkt:</span>
        </div>
        <div class="col-md-2" style="padding-top: 4px;">
            <span class="custom-label">Ilość:</span>
        </div>
        <div class="col-md-2" style="padding-top: 4px;">
            <span class="custom-label">Cena całkowita:</span>
        </div>        
        <div class="col-md-3" style="padding-top: 4px;">
            <span class="custom-label">Kategoria:</span>
        </div>
        <div class="col-md-1">
            <span class="custom-label">Usuń:</span>
        </div>
    </div>
    <div class="row product-row" style="padding-bottom: 10px;">
        <div class="col-md-4" style="padding-top: 4px; padding-left: 40px;">
            <input type="text" class="form-control" data-validators="not-empty" />
        </div>
        <div class="col-md-2" style="padding-top: 4px;">
            <input type="text" class="product-quantity-selector" style="border-top-left-radius: 4px; border-bottom-left-radius: 4px;" data-validators="not-empty,reg-exp" data-valid-reg-exp="^(?:\d*((\.)|(,))\d{2}|\d+)$">
        </div>
        <div class="col-md-2" style="padding-top: 4px;">
            <input type="text" class="product-price-selector" style="border-top-left-radius: 4px; border-bottom-left-radius: 4px;" data-validators="not-empty,reg-exp" data-valid-reg-exp="^(?:\d*((\.)|(,))\d{2}|\d+)$">                      
        </div>        
        <div class="col-md-3" style="padding-top: 4px;">
            <select id="firstProductCategorySelect" class="select-product-category selectpicker" data-live-search="true"></select>
        </div>
        <div class="col-md-1">
            
        </div>
    </div>                                                                                                           
    <div class="row">
        <div class="col-md-12" style="padding-left: 40px; padding-right: 53px;">
            <a id="btn-add-product-row" class="btn btn-default btn-lg btn-transparent">Dodaj produkt</a>
            <a class="btn btn-default btn-lg btn-transparent" style="float: right;" onclick="SaveNewBill(); return false;">Zapisz</a>
            <a id="btn-delete-bill" class="btn btn-default btn-lg btn-transparent" style="float: right; display: none; margin-right: 10px;" onclick="DeleteCurrentBill(); return false;">Usuń</a>
        </div>
    </div>
</form> 